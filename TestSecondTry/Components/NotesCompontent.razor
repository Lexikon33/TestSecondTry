@namespace NotesCompontent

@using TestSecondTry.grabes
@using TestSecondTry.model
@using System.Collections.Generic

<h1 class="main_class">Scores</h1>


<div class="center" id="center_grades">

    @if (system)
    {
        <select class="select1" @bind="selectedmin">
            @foreach (var number in numberListmin)
            {
                <option value="@number">@number</option>
            }
        </select>

        <select class="select2" @bind="selectedmax">
            @foreach (var number in numberListmax)
            {
                <option value="@number">@number</option>
            }
        </select>

        <button class="btn btn-primary" id="btn_Style" @onclick="Addsystem">Make new system</button>
    }
    else
    {

        <input class="inp_text" id="input_control" type="text" @bind-value="newsubjectTitle" placeholder="Enter your subject" />

        <select @bind="selectedsoutput">
            @foreach (var number in finalOutput)
            {
                <option value="@number">@number</option>
            }
        </select>

        <button class="btn btn-primary" id="btn_Style" @onclick="functionSystem"><RadzenIcon class="iconbtn" Icon="undo" /></button>

        <button class="btn btn-primary" id="btn_Style" @onclick="Addgrab">Add to list</button>

    }


</div>

<div class="border_todolist">

    @if (grab.Count == 0)
    {
        <p>
            Enter your Grades System.
        </p>
    }
    else
    {
        <ul>
            @foreach (var Grab in grab)
            {
                <li class="list">
                    <p>Scores: @Grab.grab</p>
                    @Grab.Text
                    <button class="btn btn-primary" id="btn_Style" @onclick="() => { Deletesystem(Grab.Id); updatedata(Grab.grab);}"><RadzenIcon class="iconbtn" Icon="delete" /></button>
                </li>
            }
        </ul>
    }
    <div class="system">
        <p><RadzenIcon class="iconbtn" id="dark_icon" Icon="star" />Score: @all</p>

        <p><RadzenIcon class="iconbtn" id="dark_icon" Icon="show_chart" />average: @average </p>

        <p><RadzenIcon class="iconbtn" id="dark_icon" Icon="grading" /> Subjects: @subject</p>
    </div>  
</div>

@code {

    int selectedmin { get; set; } = 2;

    int selectedmax { get; set; } = 2;

    int selectedsoutput { get; set; } = 0;

    private bool system = true;

    private int all = 0;

    private int subject = 0;

    private double average;

    List<int> numberListmin = new List<int> { 0, 1 };

    List<int> numberListmax = new List<int> { 5, 6, 12, 15, 100 };

    List<int> finalOutput = new List<int> { };

    [Inject]
    public grabfunction GrabFunction { get; set; } = null!;

    private List<grabmodel> grab;

    private string? newsubjectTitle;

    protected override void OnInitialized()
    {
        grab = GrabFunction.reGrab();
    }

    public void Addgrab()
    {
        if (!string.IsNullOrWhiteSpace(newsubjectTitle))
        {
            all += selectedsoutput;

            ++subject;

            if (all != 0 && subject != 0)
            {
                average = all / subject;
            }

            GrabFunction.AddGrab(new grabmodel { grab = selectedsoutput, Text = newsubjectTitle });

            newsubjectTitle = String.Empty;
        }
    }

    public void functionSystem()
    {
        system = true;

        int count = finalOutput.Count;

        int Lenght = count +1;

        while (-1 != Lenght)
        {
            finalOutput.Remove(Lenght);
            --Lenght;
        }
    }

    public void Addsystem()
    {
        if (selectedmin != 2 && selectedmax != 2)
        {
            while (selectedmin <= selectedmax)
            {
                finalOutput.Add(selectedmin);
                ++selectedmin;
            }
            system = false;

        }
    }

    public void Deletesystem(int id)
    {
        GrabFunction.DeleteGrab(id);

    }

    public void updatedata(int Score)
    {
        all -= Score;

        --subject;

        if (all != 0 && subject != 0)
        {
            average = all / subject;
        }
        else
        {
            average = 0;
        }

    }
}